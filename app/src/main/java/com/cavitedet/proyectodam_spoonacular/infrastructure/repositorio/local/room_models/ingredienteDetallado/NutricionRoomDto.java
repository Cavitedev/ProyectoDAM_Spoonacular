package com.cavitedet.proyectodam_spoonacular.infrastructure.repositorio.local.room_models.ingredienteDetallado;


import androidx.room.Embedded;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;

import com.cavitedet.proyectodam_spoonacular.domain.modelos.ingrediente_detallado.Nutricion;
import com.cavitedet.proyectodam_spoonacular.domain.modelos.ingrediente_detallado.Nutriente;
import com.cavitedet.proyectodam_spoonacular.domain.modelos.ingrediente_detallado.Propiedad;
import com.cavitedet.proyectodam_spoonacular.domain.modelos.reglas.IADominio;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class NutricionRoomDto implements IADominio<Nutricion> {

    @PrimaryKey(autoGenerate = true)
    private int autogeneratedInt;

    @Ignore
    private List<NutrienteRoomDto> nutrientes;

    @Ignore
    private List<PropiedadRoomDto> propiedades;

    @Embedded
    private DescomposicionCaloricaRoomDto descomposicionCalorica;

    @Embedded
    private PesoUnidadRoomDto pesoPorRacion;

    public NutricionRoomDto() {
    }

    public NutricionRoomDto(Nutricion dominio) {

        for (int i = 0; i < dominio.getNutrientes().size(); i++) {
            nutrientes = new ArrayList<>();
            nutrientes.add(new NutrienteRoomDto(dominio.getNutrientes().get(i),
                    i));
        }

        for (int i = 0; i < dominio.getPropiedades().size(); i++) {
            propiedades = new ArrayList<>();
            propiedades.add(new PropiedadRoomDto(dominio.getPropiedades().get(i),
                    i));
        }

        this.descomposicionCalorica = new DescomposicionCaloricaRoomDto(dominio.getDescomposicionCalorica());
        this.pesoPorRacion = new PesoUnidadRoomDto(dominio.getPesoPorRacion());
    }

    @Override
    public Nutricion aDominio() {

        List<Nutriente> nutrientes = null;
        if (this.nutrientes != null)
            nutrientes = this.nutrientes.parallelStream().map(NutrienteRoomDto::aDominio).collect(Collectors.toList());

        List<Propiedad> propiedades = null;
        if (this.propiedades != null) {
            propiedades = this.propiedades.parallelStream().map(PropiedadRoomDto::aDominio).collect(Collectors.toList());
        }


        return new Nutricion(nutrientes
                , propiedades
                , descomposicionCalorica.aDominio()
                , pesoPorRacion.aDominio());
    }

    public int getAutogeneratedInt() {
        return autogeneratedInt;
    }

    public void setAutogeneratedInt(int autogeneratedInt) {
        this.autogeneratedInt = autogeneratedInt;
    }

    public List<NutrienteRoomDto> getNutrientes() {
        return nutrientes;
    }

    public void setNutrientes(List<NutrienteRoomDto> nutrientes) {
        this.nutrientes = nutrientes;
    }

    public List<PropiedadRoomDto> getPropiedades() {
        return propiedades;
    }

    public void setPropiedades(List<PropiedadRoomDto> propiedades) {
        this.propiedades = propiedades;
    }

    public DescomposicionCaloricaRoomDto getDescomposicionCalorica() {
        return descomposicionCalorica;
    }

    public void setDescomposicionCalorica(DescomposicionCaloricaRoomDto descomposicionCalorica) {
        this.descomposicionCalorica = descomposicionCalorica;
    }

    public PesoUnidadRoomDto getPesoPorRacion() {
        return pesoPorRacion;
    }

    public void setPesoPorRacion(PesoUnidadRoomDto pesoPorRacion) {
        this.pesoPorRacion = pesoPorRacion;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof NutricionRoomDto)) return false;

        NutricionRoomDto that = (NutricionRoomDto) o;

        if (getAutogeneratedInt() != that.getAutogeneratedInt()) return false;
        if (getNutrientes() != null ? !getNutrientes().equals(that.getNutrientes()) : that.getNutrientes() != null)
            return false;
        if (getPropiedades() != null ? !getPropiedades().equals(that.getPropiedades()) : that.getPropiedades() != null)
            return false;
        if (getDescomposicionCalorica() != null ? !getDescomposicionCalorica().equals(that.getDescomposicionCalorica()) : that.getDescomposicionCalorica() != null)
            return false;
        return getPesoPorRacion() != null ? getPesoPorRacion().equals(that.getPesoPorRacion()) : that.getPesoPorRacion() == null;
    }

    @Override
    public int hashCode() {
        int result = getAutogeneratedInt();
        result = 31 * result + (getNutrientes() != null ? getNutrientes().hashCode() : 0);
        result = 31 * result + (getPropiedades() != null ? getPropiedades().hashCode() : 0);
        result = 31 * result + (getDescomposicionCalorica() != null ? getDescomposicionCalorica().hashCode() : 0);
        result = 31 * result + (getPesoPorRacion() != null ? getPesoPorRacion().hashCode() : 0);
        return result;
    }
}
